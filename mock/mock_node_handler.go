// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/adrianbrad/privatebtc"
	"sync"
)

// Ensure, that NodeHandler does implement privatebtc.NodeHandler.
// If this is not the case, regenerate this file with moq.
var _ privatebtc.NodeHandler = &NodeHandler{}

// NodeHandler is a mock implementation of privatebtc.NodeHandler.
//
//	func TestSomethingThatUsesNodeHandler(t *testing.T) {
//
//		// make and configure a mocked privatebtc.NodeHandler
//		mockedNodeHandler := &NodeHandler{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			HostRPCPortFunc: func() string {
//				panic("mock out the HostRPCPort method")
//			},
//			InternalIPFunc: func() string {
//				panic("mock out the InternalIP method")
//			},
//			NameFunc: func() string {
//				panic("mock out the Name method")
//			},
//		}
//
//		// use mockedNodeHandler in code that requires privatebtc.NodeHandler
//		// and then make assertions.
//
//	}
type NodeHandler struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// HostRPCPortFunc mocks the HostRPCPort method.
	HostRPCPortFunc func() string

	// InternalIPFunc mocks the InternalIP method.
	InternalIPFunc func() string

	// NameFunc mocks the Name method.
	NameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// HostRPCPort holds details about calls to the HostRPCPort method.
		HostRPCPort []struct {
		}
		// InternalIP holds details about calls to the InternalIP method.
		InternalIP []struct {
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
	}
	lockClose       sync.RWMutex
	lockHostRPCPort sync.RWMutex
	lockInternalIP  sync.RWMutex
	lockName        sync.RWMutex
}

// Close calls CloseFunc.
func (mock *NodeHandler) Close() error {
	if mock.CloseFunc == nil {
		panic("NodeHandler.CloseFunc: method is nil but NodeHandler.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedNodeHandler.CloseCalls())
func (mock *NodeHandler) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// HostRPCPort calls HostRPCPortFunc.
func (mock *NodeHandler) HostRPCPort() string {
	if mock.HostRPCPortFunc == nil {
		panic("NodeHandler.HostRPCPortFunc: method is nil but NodeHandler.HostRPCPort was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHostRPCPort.Lock()
	mock.calls.HostRPCPort = append(mock.calls.HostRPCPort, callInfo)
	mock.lockHostRPCPort.Unlock()
	return mock.HostRPCPortFunc()
}

// HostRPCPortCalls gets all the calls that were made to HostRPCPort.
// Check the length with:
//
//	len(mockedNodeHandler.HostRPCPortCalls())
func (mock *NodeHandler) HostRPCPortCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHostRPCPort.RLock()
	calls = mock.calls.HostRPCPort
	mock.lockHostRPCPort.RUnlock()
	return calls
}

// InternalIP calls InternalIPFunc.
func (mock *NodeHandler) InternalIP() string {
	if mock.InternalIPFunc == nil {
		panic("NodeHandler.InternalIPFunc: method is nil but NodeHandler.InternalIP was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInternalIP.Lock()
	mock.calls.InternalIP = append(mock.calls.InternalIP, callInfo)
	mock.lockInternalIP.Unlock()
	return mock.InternalIPFunc()
}

// InternalIPCalls gets all the calls that were made to InternalIP.
// Check the length with:
//
//	len(mockedNodeHandler.InternalIPCalls())
func (mock *NodeHandler) InternalIPCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInternalIP.RLock()
	calls = mock.calls.InternalIP
	mock.lockInternalIP.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *NodeHandler) Name() string {
	if mock.NameFunc == nil {
		panic("NodeHandler.NameFunc: method is nil but NodeHandler.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//
//	len(mockedNodeHandler.NameCalls())
func (mock *NodeHandler) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}
