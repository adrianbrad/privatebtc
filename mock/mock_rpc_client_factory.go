// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/adrianbrad/privatebtc"
	"sync"
)

// Ensure, that RPCClientFactory does implement privatebtc.RPCClientFactory.
// If this is not the case, regenerate this file with moq.
var _ privatebtc.RPCClientFactory = &RPCClientFactory{}

// RPCClientFactory is a mock implementation of privatebtc.RPCClientFactory.
//
//	func TestSomethingThatUsesRPCClientFactory(t *testing.T) {
//
//		// make and configure a mocked privatebtc.RPCClientFactory
//		mockedRPCClientFactory := &RPCClientFactory{
//			NewRPCClientFunc: func(hostRPCPort string, rpcUser string, rpcPass string) (privatebtc.RPCClient, error) {
//				panic("mock out the NewRPCClient method")
//			},
//		}
//
//		// use mockedRPCClientFactory in code that requires privatebtc.RPCClientFactory
//		// and then make assertions.
//
//	}
type RPCClientFactory struct {
	// NewRPCClientFunc mocks the NewRPCClient method.
	NewRPCClientFunc func(hostRPCPort string, rpcUser string, rpcPass string) (privatebtc.RPCClient, error)

	// calls tracks calls to the methods.
	calls struct {
		// NewRPCClient holds details about calls to the NewRPCClient method.
		NewRPCClient []struct {
			// HostRPCPort is the hostRPCPort argument value.
			HostRPCPort string
			// RpcUser is the rpcUser argument value.
			RpcUser string
			// RpcPass is the rpcPass argument value.
			RpcPass string
		}
	}
	lockNewRPCClient sync.RWMutex
}

// NewRPCClient calls NewRPCClientFunc.
func (mock *RPCClientFactory) NewRPCClient(hostRPCPort string, rpcUser string, rpcPass string) (privatebtc.RPCClient, error) {
	if mock.NewRPCClientFunc == nil {
		panic("RPCClientFactory.NewRPCClientFunc: method is nil but RPCClientFactory.NewRPCClient was just called")
	}
	callInfo := struct {
		HostRPCPort string
		RpcUser     string
		RpcPass     string
	}{
		HostRPCPort: hostRPCPort,
		RpcUser:     rpcUser,
		RpcPass:     rpcPass,
	}
	mock.lockNewRPCClient.Lock()
	mock.calls.NewRPCClient = append(mock.calls.NewRPCClient, callInfo)
	mock.lockNewRPCClient.Unlock()
	return mock.NewRPCClientFunc(hostRPCPort, rpcUser, rpcPass)
}

// NewRPCClientCalls gets all the calls that were made to NewRPCClient.
// Check the length with:
//
//	len(mockedRPCClientFactory.NewRPCClientCalls())
func (mock *RPCClientFactory) NewRPCClientCalls() []struct {
	HostRPCPort string
	RpcUser     string
	RpcPass     string
} {
	var calls []struct {
		HostRPCPort string
		RpcUser     string
		RpcPass     string
	}
	mock.lockNewRPCClient.RLock()
	calls = mock.calls.NewRPCClient
	mock.lockNewRPCClient.RUnlock()
	return calls
}
